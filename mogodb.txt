database: 
	show dbs
	use db_name
	db.deopDatabase()





collection:
	db.createCollection("cl_name")
	db.ocl_name.renameCollection("ncl_name")
	db.cl_name.drop()
	show collections





Document:
	db.cl_name.insertOne({name:"isha" , age:20, course:"BE"})
	db.cl_name.insertMany([{name:"isha" , age:20, course:"BE"},{name:"ISHA" , age:20, course:"BE"}])







db.createCollection("students",{
	validator:{
		$jsonSchema:{
			title: "Student Object Validation",
			required: ["name","age","course"],
			properties:{
				name:{
				     bsonType: "string",
				     description : "name must be string and required",
				},
				age:{
				     bsonType: "int",
			             minimum : 5,
				     maximum : 60,
				     description : "int must be number and required",
				},
				course:{
				     bsonType: "string",
				     enum : ["BCA","BE","BSC"],
				     description : "course must be string and required and it can be BCA,BE,BSC",
				}
			}
		}
	}
});

db.runCommand({
	collMode : "collction_name",
	validator:{
		$jsonSchema:{
			title: "Student Object Validation",
			required: ["name","age","course"],
			properties:{
				name:{
				     bsonType: "string",
				     description : "name must be string and required",
				},
				age:{
				     bsonType: "int",
			             minimum : 5,
				     maximum : 60,
				     description : "int must be number and required",
				},
				course:{
				     bsonType: "string",
				     enum : ["BCA","BE","BSC"],
				     description : "course must be string and required and it can be BCA,BE,BSC",
				}
			}
		}
	}

});








Update Document:
		db.cl_name.updateOne({name: "isha"},{$set:{age : 21 , name :"Isha" }})
		// for same key
		db.cl_name.updateMany({name: "Isha"},{$set:{course : "B.tech" }})
		

		$set : update vaue
		$unset : remove field
		$inc  increment num value
		$rename : rename field
		$mul : multipliesvalue
		$currentDate : set current date
		$max
		$min
		//in array
		$push : ad  lement
		$pop : remove element
		$pull : remove all elements
		$adToSet : adds ditinct elements







replace document:
		db.cl_name.replaceOne({ _id: ObjectId('682ef950010354db1cb5f8ad')},{name:"Preet",age:17,course:"BE",coding_skills:["C++","JAVA"]})








Delete Document :
		db._cl_name.deleteOne({field : "value"})
		db._cl_name.deleteMany({field : "value"})
		db.cl_name.deleteMany({})







read Document :
		db.cl_name.find()
		db.cl_name.find({field : "value"})
		db.cl_name.findOne({field : "value"})

		// which field we want to show
		db.cl_name.find({field : value}).projection({field1 : 1,field2 : 1,field : 0} )
		db.cl_name.find({field : "value"},{field1 : 1,field2 : 1,field : 0})

		//methods
		db.cl_name.find().count();  // gives no of records
		db.cl_name.find().sort({field : 1});  //1 for ascending -1 for descending
		db.cl_name.find().limit(3) // gives limited no of record
		db.cl_name.find().limit(3).skip(3) // skips 3 records and then show 4,5,6 record if skip(1) so showing 2,3,4

  







Comparison Operators :
			db.cl_name.find({age :{$eq : value}})

			db.cl_name.updateMany({age : {$eq : vale}},{$set : {course : "value"}})


			db.deleteMany({age : {$eq : value}})


			$eq  // equal
			$ne  // not equal
			$gt  // greater than
			$gte // greater than and equal
			$lt  // less than
			$lte  // less than and equal
			$in   //within array
			$nin  // not in array









logical Operator :

		db.cl_name.find({$and : [{age :{$gt:15}},{age :{$lt:19}}]})
		

		db.cl_name.find({$and : [{age :{$gt:15}},{age :{$lt:19}}]},{Projection})


		db.cl_name.find({age : {$not : {$gt : 18}}},{_id :0,name:1,age:1})

		db.cl_name.deleteMany({$and : [{age :{$gt:15}},{age :{$lt:19}}]})


		$and : when both match
		$or : if one match and both
		$nor : both fail
		$not : gives alternative









Element Operator:

		db.cl_name.find({skills : {$exists : false}})

		db.cl_name.find({age : {$type : "string"}})

		db.cl_name.find({age : {$type : ["string","int"]}}) // for multi type



		$exists : have or not
		$type : specified type doc












Evaluation Query Operators:

regular expression  $regex  // matches string fields to a pattern

		db.students.find({name :{$regex : "isha"}})
		db.students.find({name :{$regex : /Isha/i}}) // not case sensitive
		db.students.find({name :{$regex : "ha$"}})
		db.students.find({name :{$regex : "^A"}})

expression  	$expr   // allows field comparisons within doc

		db.usage.find({$expr:{$gt:["$budget",{$multiply:["$spent",1.2]}]}})
	db.usage.find({$expr:{$gt:["$spent","$budget"]}})

modulo		$mod	// find condition matches show that doc

		db.usage.find({spent:{$mod:[6,0]}})
		$jsonSchema // validate doc against the given JSON Schema









1)findOneAndUpdate() :

	db.students.findOneAndUpdate({name:"Isha"},{$set:{age : 21}})

	db.students.findOneAndUpdate({name:"Isha"},{$set:{age : 20}},{returnDocument:"after"})

	db.students.findOneAndUpdate({name:"Isha"},{$set:{age : 20}},{returnDocument:"after",projection:{name:1,age:1,_id:0}})

	db.students.findOneAndUpdate({name:"tisha"},{$set:{age : 20,course:"BSC"}},{returnDocument:"after",projection:{name:1,age:1,_id:0},upsert:true})

	db.students.findOneAndUpdate({name:"tisha"},{$set:{course:"BE"}},{sort : {age:-1}})




2)findOneAndReplac()

	db.students.findOneAndReplace({name:"Isha"},{name:"Ishu",age:21,course:"BE"},{returnDocument : "after"})





3)findOneAndDelete()

	db.students.findOneAndDelete({name:"tisha"},{projection : {name:1},sort:{age:-1}})


















Aggregation Pipeline Operators:
			$match
			$count
			$sort
			$sortByCount
			$project
			$limit
			$skip
			$sample
db.students.aggregate([{$match : {course:"BE"}}])

db.students.aggregate([{$match : {age :{$gt:18}}}])

db.students.aggregate([{$match : {$and:[{age:{$gt : 18}},{course:"BSC"}]}}])

db.students.aggregate([{$match : {age:{$gt : 18}}},{$count : "name"}])

db.students.aggregate([{$match : {age:{$gt : 18}}},{$sort:{age:1}}])

db.students.aggregate([{$match : {age:{$gt : 18}}},{$sort:{age:1,name:1}}])

db.students.aggregate([{$sort:{age:1,name:1}},{$project:{name:1,age:1,_id:0,isvalidage:{$gt:["$age",20]}}}])

db.students.aggregate([{$sortByCount:"$course"}])

db.students.aggregate([{$sort:{age:1,name:1}},{$project:{name:1,age:1,_id:0}},{$skip:1},{$limit:3}])

db.students.aggregate([{$sample:{size:3}}])


















Aggregation $group Operator:

		accumulator :
			$sum
			$avg
			$median
			$max
			$min
			$count
			$push
			$addToset
			$first
			$last
			$top
			$topN
			$bottom
			$bottomN

db.students.aggregate([{$group:{_id:"$course"}}])
[ { _id: 'BCA' }, { _id: 'BSC' }, { _id: 'BE' } ]


db.students.aggregate([{$group:{_id:"$course"}}])
[ { _id: 'BCA' }, { _id: 'BSC' }, { _id: 'BE' } ]
school> db.students.aggregate([{$group:{_id:"$course",count:{$sum:1}}}])
[
  { _id: 'BCA', count: 1 },
  { _id: 'BSC', count: 2 },
  { _id: 'BE', count: 2 }


db.students.aggregate([{$match:{age:{$gt:18}}},{$group:{_id:"$course",count:{$sum:1}}}])
[ { _id: 'BE', count: 2 }, { _id: 'BSC', count: 2 } ]


db.students.aggregate([{$match:{age:{$gt:18}}},{$group:{_id:"$course",count:{$count:{}}}}])
[ { _id: 'BE', count: 2 }, { _id: 'BSC', count: 2 } ]


db.students.aggregate([{$group:{_id:"$course",count:{$count:{}}}},{$sort:{count:1}}])


db.students.aggregate([{$group:{_id:"$course",std_name:{$push:"$name"}}}])
[
  { _id: 'BE', std_name: [ 'Ishu', 'Akshay' ] },
  { _id: 'BCA', std_name: [ 'Nisha' ] },
  { _id: 'BSC', std_name: [ 'Krisha', 'tisha' ] }


db.students.aggregate([{$group:{_id:"$age",std_name:{$push:"$name"}}}])
[
  { _id: 19, std_name: [ 'Krisha', 'Akshay' ] },
  { _id: 20, std_name: [ 'tisha' ] },
  { _id: 21, std_name: [ 'Ishu' ] },
  { _id: 15, std_name: [ 'Nisha' ] }


db.students.aggregate([{$group:{_id:"$age",std_name:{$push:"$$ROOT"}}}])



db.students.aggregate([{$group:{_id:"$age",std_name:{$addToSet:"$$ROOT"}}}])



db.students.aggregate([{$group:{_id:"$course",max_age:{$max:"$age"}}}])
[
  { _id: 'BE', max_age: 21 },
  { _id: 'BCA', max_age: 15 },
  { _id: 'BSC', max_age: 20 }
]


db.students.aggregate([{$group:{_id:"$course",min_age:{$min:"$age"}}}])
[
  { _id: 'BE', min_age: 19 },
  { _id: 'BCA', min_age: 15 },
  { _id: 'BSC', min_age: 19 }



db.students.aggregate([{$group:{_id:"$course",avg_age:{$avg:"$age"}}}])
[
  { _id: 'BE', avg_age: 20 },
  { _id: 'BCA', avg_age: 15 },
  { _id: 'BSC', avg_age: 19.5 }


db.students.aggregate([{$group:{_id:null,avg_age:{$avg:"$age"}}}])
[ { _id: null, avg_age: 18.8 } ]


db.students.aggregate([{$group:{_id:null,median_age:{$median:{input: "$age",method:'approximate'}}}}])
[ { _id: null, median_age: 19 } ]


db.students.aggregate([{$group:{_id:"$course",median_age:{$median:{input: "$age",method:'approximate'}}}}])
[
  { _id: 'BE', median_age: 19 },
  { _id: 'BCA', median_age: 15 },
  { _id: 'BSC', median_age: 19 }
]


db.students.aggregate([{$group:{_id:"$course",first_age:{$first:"$name"}}}])
[
  { _id: 'BCA', first_age: 'Nisha' },
  { _id: 'BSC', first_age: 'Krisha' },
  { _id: 'BE', first_age: 'Ishu' }


db.students.aggregate([{$group:{_id:"$course",last_age:{$last:"$name"}}}])
[
  { _id: 'BSC', last_age: 'tisha' },
  { _id: 'BE', last_age: 'Akshay' },
  { _id: 'BCA', last_age: 'Nisha' }



db.students.aggregate([{$group:{_id:"$course",last_age:{$top:{output:["$name","$age"],sortBy:{"age":1}}}}}])
[
  { _id: 'BE', last_age: [ 'Akshay', 19 ] },
  { _id: 'BCA', last_age: [ 'Nisha', 15 ] },
  { _id: 'BSC', last_age: [ 'Krisha', 19 ] }
]



db.students.aggregate([{$group:{_id:"$course",last_age:{$topN:{output:["$name","$age"],sortBy:{"age":1},n:2}}}}])
[
  { _id: 'BE', last_age: [ [ 'Akshay', 19 ], [ 'Ishu', 21 ] ] },
  { _id: 'BCA', last_age: [ [ 'Nisha', 15 ] ] },
  { _id: 'BSC', last_age: [ [ 'Krisha', 19 ], [ 'tisha', 20 ] ] }
]


db.students.aggregate([{$group:{_id:"$course",last_age:{$bottom:{output:["$name","$age"],sortBy:{"age":1}}}}}])
[
  { _id: 'BSC', last_age: [ 'tisha', 20 ] },
  { _id: 'BE', last_age: [ 'Ishu', 21 ] },
  { _id: 'BCA', last_age: [ 'Nisha', 15 ] }
]


db.students.aggregate([{$group:{_id:"$course",last_age:{$bottomN:{output:["$name","$age"],sortBy:{"age":1},n:3}}}}])
[
  { _id: 'BSC', last_age: [ [ 'Krisha', 19 ], [ 'tisha', 20 ] ] },
  { _id: 'BE', last_age: [ [ 'Akshay', 19 ], [ 'Ishu', 21 ] ] },
  { _id: 'BCA', last_age: [ [ 'Nisha', 15 ] ] }
]

